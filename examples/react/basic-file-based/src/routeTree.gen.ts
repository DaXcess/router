/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as AnchorImport } from './routes/anchor'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as LayoutLayout2Import } from './routes/_layout/_layout-2'
import { Route as SessionSessionIdLayoutImport } from './routes/session/$sessionId/_layout'
import { Route as LayoutLayout2LayoutBImport } from './routes/_layout/_layout-2/layout-b'
import { Route as LayoutLayout2LayoutAImport } from './routes/_layout/_layout-2/layout-a'
import { Route as SessionSessionIdLayoutLogsImport } from './routes/session/$sessionId/_layout/logs'

// Create Virtual Routes

const SessionSessionIdImport = createFileRoute('/session/$sessionId')()

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const AnchorRoute = AnchorImport.update({
  id: '/anchor',
  path: '/anchor',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SessionSessionIdRoute = SessionSessionIdImport.update({
  id: '/session/$sessionId',
  path: '/session/$sessionId',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const LayoutLayout2Route = LayoutLayout2Import.update({
  id: '/_layout-2',
  getParentRoute: () => LayoutRoute,
} as any)

const SessionSessionIdLayoutRoute = SessionSessionIdLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => SessionSessionIdRoute,
} as any)

const LayoutLayout2LayoutBRoute = LayoutLayout2LayoutBImport.update({
  id: '/layout-b',
  path: '/layout-b',
  getParentRoute: () => LayoutLayout2Route,
} as any)

const LayoutLayout2LayoutARoute = LayoutLayout2LayoutAImport.update({
  id: '/layout-a',
  path: '/layout-a',
  getParentRoute: () => LayoutLayout2Route,
} as any)

const SessionSessionIdLayoutLogsRoute = SessionSessionIdLayoutLogsImport.update(
  {
    id: '/logs',
    path: '/logs',
    getParentRoute: () => SessionSessionIdLayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/anchor': {
      id: '/anchor'
      path: '/anchor'
      fullPath: '/anchor'
      preLoaderRoute: typeof AnchorImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_layout-2': {
      id: '/_layout/_layout-2'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLayout2Import
      parentRoute: typeof LayoutImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
    '/_layout/_layout-2/layout-a': {
      id: '/_layout/_layout-2/layout-a'
      path: '/layout-a'
      fullPath: '/layout-a'
      preLoaderRoute: typeof LayoutLayout2LayoutAImport
      parentRoute: typeof LayoutLayout2Import
    }
    '/_layout/_layout-2/layout-b': {
      id: '/_layout/_layout-2/layout-b'
      path: '/layout-b'
      fullPath: '/layout-b'
      preLoaderRoute: typeof LayoutLayout2LayoutBImport
      parentRoute: typeof LayoutLayout2Import
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdImport
      parentRoute: typeof rootRoute
    }
    '/session/$sessionId/_layout': {
      id: '/session/$sessionId/_layout'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdLayoutImport
      parentRoute: typeof SessionSessionIdRoute
    }
    '/session/$sessionId/_layout/logs': {
      id: '/session/$sessionId/_layout/logs'
      path: '/logs'
      fullPath: '/session/$sessionId/logs'
      preLoaderRoute: typeof SessionSessionIdLayoutLogsImport
      parentRoute: typeof SessionSessionIdLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutLayout2RouteChildren {
  LayoutLayout2LayoutARoute: typeof LayoutLayout2LayoutARoute
  LayoutLayout2LayoutBRoute: typeof LayoutLayout2LayoutBRoute
}

const LayoutLayout2RouteChildren: LayoutLayout2RouteChildren = {
  LayoutLayout2LayoutARoute: LayoutLayout2LayoutARoute,
  LayoutLayout2LayoutBRoute: LayoutLayout2LayoutBRoute,
}

const LayoutLayout2RouteWithChildren = LayoutLayout2Route._addFileChildren(
  LayoutLayout2RouteChildren,
)

interface LayoutRouteChildren {
  LayoutLayout2Route: typeof LayoutLayout2RouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutLayout2Route: LayoutLayout2RouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface SessionSessionIdLayoutRouteChildren {
  SessionSessionIdLayoutLogsRoute: typeof SessionSessionIdLayoutLogsRoute
}

const SessionSessionIdLayoutRouteChildren: SessionSessionIdLayoutRouteChildren =
  {
    SessionSessionIdLayoutLogsRoute: SessionSessionIdLayoutLogsRoute,
  }

const SessionSessionIdLayoutRouteWithChildren =
  SessionSessionIdLayoutRoute._addFileChildren(
    SessionSessionIdLayoutRouteChildren,
  )

interface SessionSessionIdRouteChildren {
  SessionSessionIdLayoutRoute: typeof SessionSessionIdLayoutRouteWithChildren
}

const SessionSessionIdRouteChildren: SessionSessionIdRouteChildren = {
  SessionSessionIdLayoutRoute: SessionSessionIdLayoutRouteWithChildren,
}

const SessionSessionIdRouteWithChildren =
  SessionSessionIdRoute._addFileChildren(SessionSessionIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutLayout2RouteWithChildren
  '/anchor': typeof AnchorRoute
  '/posts': typeof PostsRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/': typeof PostsIndexRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
  '/session/$sessionId': typeof SessionSessionIdLayoutRouteWithChildren
  '/session/$sessionId/logs': typeof SessionSessionIdLayoutLogsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutLayout2RouteWithChildren
  '/anchor': typeof AnchorRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts': typeof PostsIndexRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
  '/session/$sessionId': typeof SessionSessionIdLayoutRouteWithChildren
  '/session/$sessionId/logs': typeof SessionSessionIdLayoutLogsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/anchor': typeof AnchorRoute
  '/posts': typeof PostsRouteWithChildren
  '/_layout/_layout-2': typeof LayoutLayout2RouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/': typeof PostsIndexRoute
  '/_layout/_layout-2/layout-a': typeof LayoutLayout2LayoutARoute
  '/_layout/_layout-2/layout-b': typeof LayoutLayout2LayoutBRoute
  '/session/$sessionId': typeof SessionSessionIdRouteWithChildren
  '/session/$sessionId/_layout': typeof SessionSessionIdLayoutRouteWithChildren
  '/session/$sessionId/_layout/logs': typeof SessionSessionIdLayoutLogsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/anchor'
    | '/posts'
    | '/posts/$postId'
    | '/posts/'
    | '/layout-a'
    | '/layout-b'
    | '/session/$sessionId'
    | '/session/$sessionId/logs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/anchor'
    | '/posts/$postId'
    | '/posts'
    | '/layout-a'
    | '/layout-b'
    | '/session/$sessionId'
    | '/session/$sessionId/logs'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/anchor'
    | '/posts'
    | '/_layout/_layout-2'
    | '/posts/$postId'
    | '/posts/'
    | '/_layout/_layout-2/layout-a'
    | '/_layout/_layout-2/layout-b'
    | '/session/$sessionId'
    | '/session/$sessionId/_layout'
    | '/session/$sessionId/_layout/logs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  AnchorRoute: typeof AnchorRoute
  PostsRoute: typeof PostsRouteWithChildren
  SessionSessionIdRoute: typeof SessionSessionIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AnchorRoute: AnchorRoute,
  PostsRoute: PostsRouteWithChildren,
  SessionSessionIdRoute: SessionSessionIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/anchor",
        "/posts",
        "/session/$sessionId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_layout-2"
      ]
    },
    "/anchor": {
      "filePath": "anchor.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/_layout/_layout-2": {
      "filePath": "_layout/_layout-2.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_layout-2/layout-a",
        "/_layout/_layout-2/layout-b"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/_layout/_layout-2/layout-a": {
      "filePath": "_layout/_layout-2/layout-a.tsx",
      "parent": "/_layout/_layout-2"
    },
    "/_layout/_layout-2/layout-b": {
      "filePath": "_layout/_layout-2/layout-b.tsx",
      "parent": "/_layout/_layout-2"
    },
    "/session/$sessionId": {
      "filePath": "session/$sessionId",
      "children": [
        "/session/$sessionId/_layout"
      ]
    },
    "/session/$sessionId/_layout": {
      "filePath": "session/$sessionId/_layout.tsx",
      "parent": "/session/$sessionId",
      "children": [
        "/session/$sessionId/_layout/logs"
      ]
    },
    "/session/$sessionId/_layout/logs": {
      "filePath": "session/$sessionId/_layout/logs.tsx",
      "parent": "/session/$sessionId/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
